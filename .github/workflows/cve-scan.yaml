name: Scan CVEs dispatch

on:
  workflow_dispatch:
  schedule:
    - cron: "0 1 * * *"

jobs:

  read-config:
    runs-on: ubuntu-latest
    outputs:
      ghcr_scanning: ${{ steps.read-config.outputs.continuous-security-scanning }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Read .github/ci.yaml with yq
        id: read-config
        run: |
          value=$(yq '.ghcr.continuous-security-scanning' .github/ci.yaml)
          echo "continuous-security-scanning=${value}" >> $GITHUB_OUTPUT

  get-images:
    runs-on: ubuntu-latest
    needs: [ read-config ]
    if: needs.read-config.outputs.ghcr_scanning == 'true'
    permissions:
      packages: read
      contents: read
    outputs:
      images: ${{ steps.get-images.outputs.images }}
    steps:
      - id: get-images
        name: Get GHCR image tags for current repo
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_OWNER: ${{ github.repository_owner }}
          GH_REPO: ${{ github.event.repository.name }}
        run: |
          echo "Fetching GHCR image tags for ghcr.io/${GH_OWNER}/${GH_REPO}..."

          # fetch function
          fetch() {
            curl -s -H "Authorization: Bearer $GH_TOKEN" -H "Accept: application/vnd.github+json" "$1"
          }

          # Determine if owner is a user or org (orgs have a separate endpoint)
          owner_type=$(fetch https://api.github.com/users/$GH_OWNER | jq -r '.type')

          if [ "$owner_type" == "Organization" ]; then
            versions=$(fetch "https://api.github.com/orgs/$GH_OWNER/packages/container/$GH_REPO/versions")
          else
            versions=$(fetch "https://api.github.com/users/$GH_OWNER/packages/container/$GH_REPO/versions")
          fi

          # Pull out every tag, prefix with the registry path
          image_list=$(echo "${versions}" | jq -r '.[] | .metadata.container.tags[]?' | sed "s|^|ghcr.io/${GH_OWNER}/${GH_REPO}:|")

          # Convert image_list to JSON array
          json_array=$(echo "$image_list" | jq -R -s -c 'split("\n") | map(select(. != ""))')

          # Set the job output
          echo "images=$json_array" >> "$GITHUB_OUTPUT"

  run-scan:
    name: Run scan for released images
    needs: [get-images, read-config]
    uses: canonical/oci-factory/.github/workflows/Vulnerability-Scan.yaml@main
    strategy:
      matrix:
        images: ${{ fromJson(needs.get-images.outputs.images) }}
    with:
      oci-image-name: ${{ matrix.images }}
      create-issue: true
    secrets: inherit